The `unittest.mock` library in Python is designed for effective testing by allowing you to replace parts of your system with mock objects and verify their usage through assertions. Here's a concise breakdown of its key features and concepts:

1. **Core Mock Class**:
   - `Mock` class eliminates the need for creating numerous stubs in your test suite.
   - You can assert which methods/attributes were used, with what arguments, and specify return values or attributes as needed.

2. **patch() Decorator**:
   - Allows patching module and class-level attributes within the scope of a test.
   - Simplifies replacing real objects with mock objects during testing.

3. **Mock and MagicMock**:
   - `Mock`: Basic mock object where you define behaviors and assertions.
   - `MagicMock`: Subclass of `Mock` with pre-defined magic methods and more flexible for mocking.

4. **Sentinel**:
   - Feature for creating unique objects during testing scenarios.

5. **Design Philosophy**:
   - Follows the 'action -> assertion' pattern where you perform actions in your tests and then assert the expected behaviors.
   - Differs from 'record -> replay' patterns used by other mocking frameworks.

6. **Compatibility**:
   - `unittest.mock` is designed for use with `unittest` framework.
   - There's a backport available as `mock` on PyPI for earlier Python versions.

This library is crucial for creating robust and reliable tests in Python by simulating parts of your system and verifying interactions based on expected behaviors.

1. **Mock and MagicMock Objects**:
   - **Mock**: Basic mock object that allows setting return values and asserting calls.

     ```python
     from unittest.mock import Mock

     # Creating a mock object with a side effect
     mock = Mock(side_effect=KeyError('foo'))
     mock()  # Raises KeyError
     ```
     - **Output**: Raises `KeyError('foo')`
     - **Explanation**: Here, `mock()` is called, triggering the side effect specified in the mock initialization, which raises a `KeyError`.

   - **MagicMock**: Subclass of `Mock` with all magic methods pre-defined.

     ```python
     from unittest.mock import MagicMock

     # Creating a MagicMock object with a mocked method
     mock = MagicMock()
     mock.method.return_value = 3
     assert mock.method(3, 4, 5, key='value') == 3
     mock.method.assert_called_with(3, 4, 5, key='value')
     ```
     - **Output**: No output directly shown, but `assert` statements verify method call and return value.
     - **Explanation**: `MagicMock` allows setting up specific return values (`return_value`) for methods (`method.return_value = 3`) and then asserting that the method was called with specific arguments (`assert_called_with`).

2. **Patch**:
   - Used to replace classes or objects during testing.

     ```python
     from unittest.mock import patch

     # Example using patch as a decorator
     @patch('module.ClassName1')
     @patch('module.ClassName2')
     def test(MockClass1, MockClass2):
         module.ClassName1()
         module.ClassName2()
         assert MockClass1 is module.ClassName1
         assert MockClass2 is module.ClassName2
         assert MockClass1.called
         assert MockClass2.called

     test()
     ```
     - **Output**: No output shown directly here, but assertions check if mocks were called correctly.
     - **Explanation**: `patch` replaces `module.ClassName1` and `module.ClassName2` with mock objects (`MockClass1` and `MockClass2`) during the execution of `test()`. Assertions verify that these mocks were called and match the original classes.

3. **Side Effects**:
   - Allows defining behaviors like raising exceptions or dynamic return values.

     ```python
     from unittest.mock import Mock

     # Mock with a side effect as an iterable
     mock = Mock(side_effect=[5, 4, 3, 2, 1])
     assert mock() == 5
     assert mock() == 4
     ```
     - **Output**: No direct output, but assertions check the return values of `mock()`.
     - **Explanation**: `side_effect` allows specifying an iterable (`[5, 4, 3, 2, 1]`) where each call to `mock()` returns the next value from the iterable.

4. **Auto-speccing**:
   - Ensures mock objects have the same API as the objects they replace.

     ```python
     from unittest.mock import create_autospec

     def function(a, b, c):
         pass

     # Creating a mock function with auto-speccing
     mock_function = create_autospec(function, return_value='fishy')
     assert mock_function(1, 2, 3) == 'fishy'
     ```
     - **Output**: No direct output shown, but assertion verifies the return value.
     - **Explanation**: `create_autospec` creates a mock (`mock_function`) that mimics the function `function` in terms of its signature (`a, b, c`). The mock is configured to return `'fishy'` when called with specific arguments (`1, 2, 3`).

5. **Assertions**:
   - Methods like `assert_called_with`, `assert_called_once_with`, `assert_any_call`, etc., verify how mocks were called.

     ```python
     from unittest.mock import Mock

     # Creating a mock object and asserting its calls
     mock = Mock(return_value=None)
     mock('foo', bar='baz')
     mock.assert_called_once_with('foo', bar='baz')
     ```
     - **Output**: No output directly shown, but assertion checks if `mock()` was called with specified arguments.
     - **Explanation**: `assert_called_once_with` asserts that `mock('foo', bar='baz')` was called exactly once with the specified arguments.

6. **Resetting Mocks**:
   - `reset_mock()` resets call attributes of a mock.

     ```python
     from unittest.mock import Mock

     # Creating a mock object, calling it, and resetting it
     mock = Mock(return_value=None)
     mock('hello')
     mock.reset_mock()
     assert not mock.called
     ```
     - **Output**: No direct output shown, but assertion checks if `mock` was reset successfully.
     - **Explanation**: `reset_mock()` resets all call attributes (`called`, `call_count`, etc.) of `mock`, ensuring it behaves as if it hasn't been called before.

These examples demonstrate how `unittest.mock` can be used to create flexible mock objects for testing purposes, simulate behaviors, and verify interactions with mocked parts of the system. Each example showcases a different aspect of `unittest.mock` functionality, aiding in effective unit testing in Python.



The `Mock` class in `unittest.mock` is a powerful tool for creating flexible mock objects in Python testing. Here's a detailed look at its features and capabilities:

1. **Basic Functionality**:
   - **Flexibility**: Intended to replace stubs and test doubles throughout your codebase.
   - **Callable**: Mocks are callable objects and dynamically create attributes as new mocks when accessed.
   - **Recording Usage**: Records how they are used, enabling assertions about the interactions with your code.

2. **MagicMock**:
   - **Subclass**: `MagicMock` inherits from `Mock` and includes pre-defined magic methods for ease of use.
   - **Non-callable Variants**: `NonCallableMock` and `NonCallableMagicMock` are available for non-callable objects.

3. **Constructor Arguments** (`unittest.mock.Mock`):
   - **spec**: Specifies attributes based on an existing object or a list of strings.
   - **side_effect**: Defines actions or exceptions to occur when the mock is called.
   - **return_value**: Specifies the default return value when the mock is invoked.
   - **wraps**: Allows calls to pass through to a wrapped object if specified.
   - **name**: Provides a name for the mock, aiding in debugging.
   - **unsafe**: Controls access to attributes starting with 'assert'.

4. **Assertions**:
   - **assert_called()**: Ensures the mock was called at least once.
   - **assert_called_once()**: Ensures the mock was called exactly once.
   - **assert_called_with(*args, **kwargs)**: Checks the last call was made with specific arguments.
   - **assert_called_once_with(*args, **kwargs)**: Checks the single call made with specific arguments.
   - **assert_any_call(*args, **kwargs)**: Checks if the mock was called with specific arguments at least once.
   - **assert_has_calls(calls, any_order=False)**: Verifies specific sequences of calls were made, optionally in any order.

These features make `Mock` a versatile tool for creating and verifying mock objects in Python tests, ensuring the correctness and reliability of your code through structured assertions and controlled behaviors.


### 1. Basic Functionality

#### Flexibility
- **Description**: The `Mock` class is designed to replace stubs and test doubles, offering flexibility in how mock objects behave during testing.
  
#### Callable
- **Description**: Mock objects are callable, meaning they can simulate the behavior of real objects or functions within your test scenarios.
- **Example**:
  ```python
  from unittest.mock import Mock
  
  # Create a Mock object
  mock_obj = Mock()
  
  # Mock objects are callable
  mock_obj.return_value = 10
  
  # Calling the mock object
  result = mock_obj()
  print(result)  # Output: 10
  ```

#### Recording Usage
- **Description**: Mocks record how they are used, allowing assertions about method calls, arguments passed, and more.
- **Example**:
  ```python
  from unittest.mock import Mock
  
  # Create a Mock object
  mock_obj = Mock()
  
  mock_obj.method(1, 2, key='value')
  
  # Check method call and arguments
  mock_obj.method.assert_called_with(1, 2, key='value')
  ```

### 2. MagicMock

#### Subclass
- **Description**: `MagicMock` is a subclass of `Mock` that includes pre-defined magic methods for convenience.
  
#### Non-callable Variants
- **Description**: `NonCallableMock` and `NonCallableMagicMock` are variants for mocking objects that are not callable.

### 3. Constructor Arguments (`unittest.mock.Mock`)

#### spec
- **Description**: Specifies attributes based on an existing object or a list of strings.
  
#### side_effect
- **Description**: Defines actions or exceptions to occur when the mock is called.
  
#### return_value
- **Description**: Specifies the default return value when the mock is invoked.
  
#### wraps
- **Description**: Allows calls to pass through to a wrapped object if specified.
  
#### name
- **Description**: Provides a name for the mock, aiding in debugging.
  
#### unsafe
- **Description**: Controls access to attributes starting with 'assert'.

### 4. Assertions

#### assert_called()
- **Description**: Ensures the mock was called at least once.
  
#### assert_called_once()
- **Description**: Ensures the mock was called exactly once.
  
#### assert_called_with(*args, **kwargs)
- **Description**: Checks that the last call was made with specific arguments.

#### assert_called_once_with(*args, **kwargs)
- **Description**: Checks that the mock was called exactly once with specific arguments.
  
#### assert_any_call(*args, **kwargs)
- **Description**: Checks if the mock was called with specific arguments at least once.
  
#### assert_has_calls(calls, any_order=False)
- **Description**: Verifies specific sequences of calls were made, optionally in any order.

### Full Example Code

Here's a complete Python script demonstrating various features and assertions of the `Mock` class:

```python
from unittest.mock import Mock

# Basic Functionality
# Flexibility, Callable, Recording Usage
mock_obj = Mock()
mock_obj.return_value = 10
result = mock_obj()
print(result)  # Output: 10

mock_obj.method(1, 2, key='value')
mock_obj.method.assert_called_with(1, 2, key='value')

# MagicMock
# No specific code needed here as it extends Mock with magic method support

# Constructor Arguments
# Spec, side_effect, return_value, wraps, name, unsafe
mock_obj = Mock(spec=['method'], return_value=20, name='my_mock')
print(mock_obj.method())  # Output: 20

mock_obj.side_effect = ValueError('Error!')
try:
    mock_obj()
except ValueError as e:
    print(str(e))  # Output: Error!

# Assertions
# assert_called, assert_called_once, assert_called_with, assert_any_call, assert_has_calls
mock_obj = Mock()
mock_obj.method(1, 2)
mock_obj.method.assert_called_once_with(1, 2)

mock_obj.method(3, 4)
mock_obj.method.assert_any_call(3, 4)

mock_obj.method(5, 6)
mock_obj.assert_has_calls([
    mock_obj.method(1, 2),
    mock_obj.method(3, 4),
    mock_obj.method(5, 6),
], any_order=False)
```

### assert_not_called()
Asserts that a mock object was never called.

```python
from unittest.mock import Mock

m = Mock()
m.hello.assert_not_called()
obj = m.hello()
m.hello.assert_not_called()  # Raises AssertionError
```
Output:
```
Traceback (most recent call last):
  ...
AssertionError: Expected 'hello' to not have been called. Called 1 times.
```

### reset_mock(*, return_value=False, side_effect=False)
Resets all call attributes on a mock object.

```python
from unittest.mock import Mock

mock = Mock(return_value=None)
mock('hello')
print(mock.called)  # True
mock.reset_mock()
print(mock.called)  # False
```
Output:
```
True
False
```

### configure_mock(**kwargs)
Sets attributes on the mock through keyword arguments.

```python
from unittest.mock import Mock

mock = Mock()
attrs = {'method.return_value': 3, 'other.side_effect': KeyError}
mock.configure_mock(**attrs)
print(mock.method())  # 3
mock.other()  # Raises KeyError
```
Output:
```
3
Traceback (most recent call last):
  ...
KeyError
```

### called
Boolean representing whether or not the mock object has been called.

```python
from unittest.mock import Mock

mock = Mock(return_value=None)
print(mock.called)  # False
mock()
print(mock.called)  # True
```
Output:
```
False
True
```

### call_count
Integer telling you how many times the mock object has been called.

```python
from unittest.mock import Mock

mock = Mock(return_value=None)
print(mock.call_count)  # 0
mock()
mock()
print(mock.call_count)  # 2
```
Output:
```
0
2
```

### return_value
Configures the value returned by calling the mock.

```python
from unittest.mock import Mock

mock = Mock()
mock.return_value = 'fish'
print(mock())  # 'fish'
```
Output:
```
'fish'
```

### side_effect
Specifies a function, iterable, or exception to be raised when the mock is called.

```python
from unittest.mock import Mock

mock = Mock()
mock.side_effect = [3, 2, 1]
print(mock(), mock(), mock())  # (3, 2, 1)
```
Output:
```
(3, 2, 1)
```

### call_args
Returns the arguments of the last call made to the mock.

```python
from unittest.mock import Mock

mock = Mock(return_value=None)
mock(3, 4, 5, key='fish', next='w00t!')
print(mock.call_args)  # call(3, 4, 5, key='fish', next='w00t!')
print(mock.call_args.args)  # (3, 4, 5)
print(mock.call_args.kwargs)  # {'key': 'fish', 'next': 'w00t!'}
```
Output:
```
call(3, 4, 5, key='fish', next='w00t!')
(3, 4, 5)
{'key': 'fish', 'next': 'w00t!'}
```

### call_args_list
Lists all calls made to the mock object in sequence.

```python
from unittest.mock import Mock, call

mock = Mock(return_value=None)
mock()
mock(3, 4)
mock(key='fish', next='w00t!')
print(mock.call_args_list)
```
Output:
```
[call(), call(3, 4), call(key='fish', next='w00t!')]
```

### method_calls
Lists all calls to methods and attributes of the mock.

```python
from unittest.mock import Mock, call

mock = Mock()
mock.method()
mock.property.method.attribute()
print(mock.method_calls)
```
Output:
```
[call.method(), call.property.method.attribute()]
```

### mock_calls
Records all calls to the mock object, including methods, magic methods, and return value mocks.

```python
from unittest.mock import MagicMock, call

mock = MagicMock()
result = mock(1, 2, 3)
mock.first(a=3)
mock.second()
int(mock)
result(1)
print(mock.mock_calls)
```
Output:
```
[call(1, 2, 3), call.first(a=3), call.second(), call.__int__(), call()(1)]
```

These outputs demonstrate how each method and attribute behaves in various scenarios, providing insight into the capabilities of mock objects in Python's unittest.mock module.



### i stoped in The return value and side effect of child mocks can be set in the same way, using dotted notation. As you can’t use dotted names directly in a call you have to create a dictionary and unpack it using **: in 

https://docs.python.org/3/library/unittest.mock.html

